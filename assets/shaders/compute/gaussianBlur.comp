#version 430 core
#define NS_NUM_WORK_GROUP_X 32
#define NS_NUM_WORK_GROUP_Y 32

layout( local_size_x = NS_NUM_WORK_GROUP_X, local_size_y = NS_NUM_WORK_GROUP_Y) in;
layout(rgba16f, binding = 0) uniform image2D outTex;


uniform bool horizontal;//if true will blur only horizontaly else verticaly

uniform sampler2D inputTexture;//texture to blur
#define FACTOR 1  
const float weight[5] = const float[] (0.227027 * FACTOR, 0.1945946 * FACTOR, 0.1216216 * FACTOR, 0.054054 * FACTOR, 0.016216 * FACTOR);
const float stepFac = 1;

void main(){
	const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);//pixel coordinates
	const ivec2 size = imageSize(outTex);//size of the texture to write into

    //get the uv of the texture we are writing into
    vec2 uv = ((vec2(pixel_coords) + vec2(.5)) / vec2(size));

    //create the result var
    vec3 result = texture(inputTexture, uv).rgb * weight[0];
    const vec2 texel = 1.0 / size;//get the texel size
    
    //if we need to blur horizontaly
    if(horizontal)
    {
        for(int i = 1; i < 5; ++i)
        {
           
            const float step_ = i * texel.x * stepFac;
            const vec2 pos = uv + vec2(step_, 0);
            const vec2 neg = uv - vec2(step_, 0);
        
            
            if(pos.x < 1)
                result += texture(inputTexture, pos).rgb * weight[i];
        
            if(neg.x > 0.0)
                result += texture(inputTexture, neg).rgb * weight[i];
        }
    }
    else//if we need to blur vertically
    {
        for(int i = 1; i < 5; ++i)
        {
            const float step_ = i * texel.y * stepFac;
            const vec2 pos = uv + vec2(0, step_);
            const vec2 neg = uv - vec2(0, step_);

            
            if(pos.y < 1)  
                result += texture(inputTexture, pos).rgb * weight[i];

            if(neg.y > 0.0)
                result += texture(inputTexture, neg).rgb * weight[i];
        }
    }

	vec4 color = vec4(result, 1);
    
	imageStore(outTex, pixel_coords, color);
}