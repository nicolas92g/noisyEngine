#version 430 core
#define NS_NUM_WORK_GROUP_X 16
#define NS_NUM_WORK_GROUP_Y 16

#define FXAA_SPAN_MAX 8.0
#define FXAA_REDUCE_MUL 1.0 / 8.0
#define FXAA_REDUCE_MIN 1.0 / 128.0

layout( local_size_x = NS_NUM_WORK_GROUP_X, local_size_y = NS_NUM_WORK_GROUP_Y) in;
layout(rgba32f, binding = 0) uniform image2D outTex;

uniform ivec2 viewportExtent;
uniform float exposure = 1.1;

//input
uniform sampler2D colorMap;
uniform sampler2D colorMap2;
uniform sampler2D depthMap;
uniform bool enableFXAA = true;

vec3 FXAA(vec2 uv){
    //FXA
    const float left = (gl_GlobalInvocationID.x < 2) ? 0.0 : -1.0;
    const float right = (gl_GlobalInvocationID.x > viewportExtent.x - 2) ? 0.0 : 1.0;
    
    const vec3 rgbNW = texture2D(colorMap, uv + (vec2(left,-1.0) / vec2(viewportExtent))).xyz;
    const vec3 rgbNE = texture2D(colorMap, uv + (vec2(right,-1.0) / vec2(viewportExtent))).xyz;
    const vec3 rgbSW = texture2D(colorMap, uv + (vec2(left,1.0) / vec2(viewportExtent))).xyz;
    const vec3 rgbSE = texture2D(colorMap, uv + (vec2(right,1.0) / vec2(viewportExtent))).xyz;
    const vec3 rgbM = texture2D(colorMap,uv).xyz;
    
    const vec3 luma=vec3(0.299, 0.587, 0.114);
    const float lumaNW = dot(rgbNW, luma);
    const float lumaNE = dot(rgbNE, luma);
    const float lumaSW = dot(rgbSW, luma);
    const float lumaSE = dot(rgbSE, luma);
    const float lumaM  = dot(rgbM,  luma);
    
    const float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    const float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
    
    vec2 dir;
    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
    
    const float dirReduce = max(
                          (lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),
                          FXAA_REDUCE_MIN);
    
    const float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);
    
    dir = min(vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),
              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
                  dir * rcpDirMin)) / vec2(viewportExtent);
    
    const vec3 rgbA = (1.0/2.0) * (
                             texture2D(colorMap, uv + dir * (1.0/3.0 - 0.5)).xyz +
                             texture2D(colorMap, uv + dir * (2.0/3.0 - 0.5)).xyz);

    const vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (
                                                texture2D(colorMap, uv + dir * (0.0/3.0 - 0.5)).xyz +
                                                texture2D(colorMap, uv + dir * (3.0/3.0 - 0.5)).xyz);
    const float lumaB = dot(rgbB, luma);
    
    if((lumaB < lumaMin) || (lumaB > lumaMax)) {
        return rgbA;
    }

    return rgbB;
}
void postProcessing(inout vec4 color, vec2 uv){
    color.rgb = (enableFXAA) ? FXAA(uv) : texture2D(colorMap, uv).rgb;
	color.rgb += texture(colorMap2, uv).rgb;

	// exposure tone mapping
    color.rgb = vec3(1.0) - exp(-color.rgb * exposure);

    // gamma correction 
    color.rgb = pow(color.rgb, vec3(1.0 / 2.2));
    color.a = 1;
}

void main(){
	const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	if(pixel_coords.x > viewportExtent.x) return;
	if(pixel_coords.y > viewportExtent.y) return;

	vec2 uv = vec2((vec2(pixel_coords) + vec2(.5)) / vec2(viewportExtent));
	vec4 color = pow(texture(colorMap, uv), vec4(1));

	postProcessing(color, uv);

	imageStore(outTex, pixel_coords, color);
}